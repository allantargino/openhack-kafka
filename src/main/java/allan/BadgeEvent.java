/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package allan;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BadgeEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5250512219440653133L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BadgeEvent\",\"namespace\":\"allan\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"displayName\",\"type\":\"string\"},{\"name\":\"reputation\",\"type\":\"string\"},{\"name\":\"upVotes\",\"type\":\"int\"},{\"name\":\"downVotes\",\"type\":\"int\"},{\"name\":\"processedDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BadgeEvent> ENCODER =
      new BinaryMessageEncoder<BadgeEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BadgeEvent> DECODER =
      new BinaryMessageDecoder<BadgeEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BadgeEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BadgeEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BadgeEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BadgeEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BadgeEvent from a ByteBuffer. */
  public static BadgeEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence userId;
  @Deprecated public java.lang.CharSequence displayName;
  @Deprecated public java.lang.CharSequence reputation;
  @Deprecated public int upVotes;
  @Deprecated public int downVotes;
  @Deprecated public java.lang.CharSequence processedDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BadgeEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param userId The new value for userId
   * @param displayName The new value for displayName
   * @param reputation The new value for reputation
   * @param upVotes The new value for upVotes
   * @param downVotes The new value for downVotes
   * @param processedDate The new value for processedDate
   */
  public BadgeEvent(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence userId, java.lang.CharSequence displayName, java.lang.CharSequence reputation, java.lang.Integer upVotes, java.lang.Integer downVotes, java.lang.CharSequence processedDate) {
    this.id = id;
    this.name = name;
    this.userId = userId;
    this.displayName = displayName;
    this.reputation = reputation;
    this.upVotes = upVotes;
    this.downVotes = downVotes;
    this.processedDate = processedDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return userId;
    case 3: return displayName;
    case 4: return reputation;
    case 5: return upVotes;
    case 6: return downVotes;
    case 7: return processedDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: userId = (java.lang.CharSequence)value$; break;
    case 3: displayName = (java.lang.CharSequence)value$; break;
    case 4: reputation = (java.lang.CharSequence)value$; break;
    case 5: upVotes = (java.lang.Integer)value$; break;
    case 6: downVotes = (java.lang.Integer)value$; break;
    case 7: processedDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'displayName' field.
   * @return The value of the 'displayName' field.
   */
  public java.lang.CharSequence getDisplayName() {
    return displayName;
  }

  /**
   * Sets the value of the 'displayName' field.
   * @param value the value to set.
   */
  public void setDisplayName(java.lang.CharSequence value) {
    this.displayName = value;
  }

  /**
   * Gets the value of the 'reputation' field.
   * @return The value of the 'reputation' field.
   */
  public java.lang.CharSequence getReputation() {
    return reputation;
  }

  /**
   * Sets the value of the 'reputation' field.
   * @param value the value to set.
   */
  public void setReputation(java.lang.CharSequence value) {
    this.reputation = value;
  }

  /**
   * Gets the value of the 'upVotes' field.
   * @return The value of the 'upVotes' field.
   */
  public java.lang.Integer getUpVotes() {
    return upVotes;
  }

  /**
   * Sets the value of the 'upVotes' field.
   * @param value the value to set.
   */
  public void setUpVotes(java.lang.Integer value) {
    this.upVotes = value;
  }

  /**
   * Gets the value of the 'downVotes' field.
   * @return The value of the 'downVotes' field.
   */
  public java.lang.Integer getDownVotes() {
    return downVotes;
  }

  /**
   * Sets the value of the 'downVotes' field.
   * @param value the value to set.
   */
  public void setDownVotes(java.lang.Integer value) {
    this.downVotes = value;
  }

  /**
   * Gets the value of the 'processedDate' field.
   * @return The value of the 'processedDate' field.
   */
  public java.lang.CharSequence getProcessedDate() {
    return processedDate;
  }

  /**
   * Sets the value of the 'processedDate' field.
   * @param value the value to set.
   */
  public void setProcessedDate(java.lang.CharSequence value) {
    this.processedDate = value;
  }

  /**
   * Creates a new BadgeEvent RecordBuilder.
   * @return A new BadgeEvent RecordBuilder
   */
  public static allan.BadgeEvent.Builder newBuilder() {
    return new allan.BadgeEvent.Builder();
  }

  /**
   * Creates a new BadgeEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BadgeEvent RecordBuilder
   */
  public static allan.BadgeEvent.Builder newBuilder(allan.BadgeEvent.Builder other) {
    return new allan.BadgeEvent.Builder(other);
  }

  /**
   * Creates a new BadgeEvent RecordBuilder by copying an existing BadgeEvent instance.
   * @param other The existing instance to copy.
   * @return A new BadgeEvent RecordBuilder
   */
  public static allan.BadgeEvent.Builder newBuilder(allan.BadgeEvent other) {
    return new allan.BadgeEvent.Builder(other);
  }

  /**
   * RecordBuilder for BadgeEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BadgeEvent>
    implements org.apache.avro.data.RecordBuilder<BadgeEvent> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence userId;
    private java.lang.CharSequence displayName;
    private java.lang.CharSequence reputation;
    private int upVotes;
    private int downVotes;
    private java.lang.CharSequence processedDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(allan.BadgeEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.displayName)) {
        this.displayName = data().deepCopy(fields()[3].schema(), other.displayName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.reputation)) {
        this.reputation = data().deepCopy(fields()[4].schema(), other.reputation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.upVotes)) {
        this.upVotes = data().deepCopy(fields()[5].schema(), other.upVotes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.downVotes)) {
        this.downVotes = data().deepCopy(fields()[6].schema(), other.downVotes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processedDate)) {
        this.processedDate = data().deepCopy(fields()[7].schema(), other.processedDate);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BadgeEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(allan.BadgeEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.displayName)) {
        this.displayName = data().deepCopy(fields()[3].schema(), other.displayName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.reputation)) {
        this.reputation = data().deepCopy(fields()[4].schema(), other.reputation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.upVotes)) {
        this.upVotes = data().deepCopy(fields()[5].schema(), other.upVotes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.downVotes)) {
        this.downVotes = data().deepCopy(fields()[6].schema(), other.downVotes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processedDate)) {
        this.processedDate = data().deepCopy(fields()[7].schema(), other.processedDate);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'displayName' field.
      * @return The value.
      */
    public java.lang.CharSequence getDisplayName() {
      return displayName;
    }

    /**
      * Sets the value of the 'displayName' field.
      * @param value The value of 'displayName'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setDisplayName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.displayName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'displayName' field has been set.
      * @return True if the 'displayName' field has been set, false otherwise.
      */
    public boolean hasDisplayName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'displayName' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearDisplayName() {
      displayName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'reputation' field.
      * @return The value.
      */
    public java.lang.CharSequence getReputation() {
      return reputation;
    }

    /**
      * Sets the value of the 'reputation' field.
      * @param value The value of 'reputation'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setReputation(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.reputation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'reputation' field has been set.
      * @return True if the 'reputation' field has been set, false otherwise.
      */
    public boolean hasReputation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'reputation' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearReputation() {
      reputation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'upVotes' field.
      * @return The value.
      */
    public java.lang.Integer getUpVotes() {
      return upVotes;
    }

    /**
      * Sets the value of the 'upVotes' field.
      * @param value The value of 'upVotes'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setUpVotes(int value) {
      validate(fields()[5], value);
      this.upVotes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'upVotes' field has been set.
      * @return True if the 'upVotes' field has been set, false otherwise.
      */
    public boolean hasUpVotes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'upVotes' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearUpVotes() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'downVotes' field.
      * @return The value.
      */
    public java.lang.Integer getDownVotes() {
      return downVotes;
    }

    /**
      * Sets the value of the 'downVotes' field.
      * @param value The value of 'downVotes'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setDownVotes(int value) {
      validate(fields()[6], value);
      this.downVotes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'downVotes' field has been set.
      * @return True if the 'downVotes' field has been set, false otherwise.
      */
    public boolean hasDownVotes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'downVotes' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearDownVotes() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'processedDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getProcessedDate() {
      return processedDate;
    }

    /**
      * Sets the value of the 'processedDate' field.
      * @param value The value of 'processedDate'.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder setProcessedDate(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.processedDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'processedDate' field has been set.
      * @return True if the 'processedDate' field has been set, false otherwise.
      */
    public boolean hasProcessedDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'processedDate' field.
      * @return This builder.
      */
    public allan.BadgeEvent.Builder clearProcessedDate() {
      processedDate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BadgeEvent build() {
      try {
        BadgeEvent record = new BadgeEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.displayName = fieldSetFlags()[3] ? this.displayName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.reputation = fieldSetFlags()[4] ? this.reputation : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.upVotes = fieldSetFlags()[5] ? this.upVotes : (java.lang.Integer) defaultValue(fields()[5]);
        record.downVotes = fieldSetFlags()[6] ? this.downVotes : (java.lang.Integer) defaultValue(fields()[6]);
        record.processedDate = fieldSetFlags()[7] ? this.processedDate : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BadgeEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<BadgeEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BadgeEvent>
    READER$ = (org.apache.avro.io.DatumReader<BadgeEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
